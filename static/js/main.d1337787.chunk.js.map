{"version":3,"sources":["Playground.js","components/Name.js","components/WindowSize.js","components/Canvas.js","components/ColorPicker.js","components/RefreshBtn.js","components/Paint.js","App.js","serviceWorker.js","index.js"],"names":["Playground","useState","count","setCount","inputRef","useRef","randomColor","color","setColor","useEffect","current","focus","cb","useCallback","num","console","log","style","borderTop","onClick","currentCount","ref","type","onChange","e","target","value","Calculate","React","memo","renderCount","name","setName","className","setSelectionRange","length","placeholder","useWindowSize","window","innerWidth","innerHeight","windowWidth","windowHeight","setWindowSize","handleResize","addEventListener","removeEventListener","Canvas","props","drawing","setDrawing","width","setWidth","height","setHeight","canvasRef","ctx","getContext","stopDrawing","closePath","onMouseDown","lineJoin","lineCap","lineWidth","strokeStyle","beginPath","moveTo","clientX","offsetLeft","clientY","offsetTop","onMouseUp","onMouseOut","onMouseMove","coords","lineTo","stroke","handleMouseMove","ColorPicker","colors","activeColor","setActiveColor","map","i","key","checked","background","Paint","setColors","getColors","baseColor","slice","fetch","then","res","json","hex","visible","setVisible","timeoutId","clearTimeout","setTimeout","Name","marginTop","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d1337787.chunk.js","sourcesContent":["// import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react'\n// import randomColor from \"randomcolor\"\n\n// export default function Playground() {\n\n//     const inputRef = useRef()\n\n//     const [count, setCount] = useState(0)\n//     const [color, setColor] = useState(null)\n\n//     useEffect(() => {\n//         setColor(randomColor())\n//         inputRef.current.focus()\n//     }, [count])\n\n//     const cb = useCallback(num => console.log(num), [count])\n\n//     return (\n//         <div style={{ borderTop: `20px solid ${color}` }}>\n//             {count}\n//             <button onClick={() => setCount(curentCount => curentCount + 2)}>+2</button>\n//             <button onClick={() => { setCount(count => count - 1) }}>-1</button>\n//             <input ref={inputRef} type=\"range\" onChange={e => setCount(e.target.value)} value={count}></input>\n//             <Calculate cb={cb} num={count}></Calculate>\n//         </div>\n//     )\n\n\n// }\n\n// const Calculate = React.memo(({ cb, num }) => {\n//     cb(num)\n//     const renderCount = useRef(1)\n//     return <div>{renderCount.current + 1}</div>\n// })\n\nimport React, { useState, useEffect, useRef, useCallback, useMemo } from 'react'\nimport randomColor from 'randomcolor'\n\nexport default function Playground() {\n    const [count, setCount] = useState(30)\n\n    const inputRef = useRef()\n\n    const [color, setColor] = useState(randomColor())\n    useEffect(() => inputRef.current.focus(), [count])\n\n    const cb = useCallback(num => console.log(num), [count])\n\n    return (\n        <div style={{ borderTop: `10px solid ${color}` }}>\n            {count}\n            <button onClick={() => setCount(currentCount => currentCount - 1)}>-</button>\n            <button onClick={() => setCount(currentCount => currentCount + 1)}>+</button>\n            <button onClick={() => setColor(randomColor())}>Change Color</button>\n            <hr />\n            <input ref={inputRef} type=\"range\" onChange={e => setCount(e.target.value)} value={count} />\n            <Calculate cb={cb} num={count} />\n        </div>\n    )\n}\n\nconst Calculate = React.memo(({ cb, num }) => {\n    cb(num)\n    const renderCount = useRef(1)\n    return <div>{renderCount.current++}</div>\n})","import React, { useState } from 'react'\n\nexport default React.memo(() => {\n    const [name, setName] = useState('')\n    return (\n        <label className=\"header-name\">\n            <input\n                value={name}\n                onChange={e => setName(e.target.value)}\n                onClick={e => e.target.setSelectionRange(0, e.target.value.length)}\n                placeholder=\"Untitled\"\n            />\n        </label>\n    )\n})","import React, { useState, useEffect } from 'react'\n\nexport default function useWindowSize(cb) {\n    const [[windowWidth, windowHeight], setWindowSize] = useState([window.innerWidth, window.innerHeight])\n\n    useEffect(() => {\n        const handleResize = () => {\n            cb()\n            setWindowSize([window.innerWidth, window.innerHeight])\n        }\n        window.addEventListener('resize', handleResize)\n        return () => window.removeEventListener('resize', handleResize)\n    }, [])\n    return [windowWidth, windowHeight]\n}\n// import React, { useState, useEffect } from 'react'\n\n// export default function WindowSize() {\n\n//     //hooks for width and height of window\n//     const [[windowWidth, windowHeight], setWindowSize] = useState([window.innerWidth, window.innerHeight])\n\n//     //hooks for visible\n//     const [visible, setVisible] = useState(false)\n\n\n//     useEffect(() => {\n\n//         let timeOutId\n//         //effect\n//         const resizeEventHandler = () => {\n//             setWindowSize([window.innerWidth, window.innerHeight])\n//             setVisible(true)\n//             clearTimeout(timeOutId)\n//             timeOutId = setTimeout(() => setVisible(false), 5000)\n//         }\n//         window.addEventListener(\"resize\", resizeEventHandler)\n\n//         //return\n//         return () => {\n//             //cleanup\n\n//             window.removeEventListener(\"resize\", resizeEventHandler)\n//         }\n//     }, [])\n\n\n\n//     return (\n//         <div className={`window-size ${visible ? \"\" : \"hidden\"}`}>\n//             {windowWidth} x {windowHeight}\n//         </div>\n//     )\n// }\n","// import React from 'react'\n\n// export default class Canvas extends React.Component {\n//     constructor(props) {\n//         super(props)\n//         this.canvasRef = React.createRef()\n//         this.handleMouseMove = this.handleMouseMove.bind(this)\n//         this.handleResize = this.handleResize.bind(this)\n//         this.startDrawing = this.startDrawing.bind(this)\n//         this.stopDrawing = this.stopDrawing.bind(this)\n//         this.state = {\n//             drawing: false,\n//             width: window.innerWidth\n//         }\n//     }\n//     componentDidMount() {\n//         this.ctx = this.canvasRef.current.getContext('2d')\n//         window.addEventListener('resize', this.handleResize);\n//     }\n//     componentWillUnmount() {\n//         window.removeEventListener('resize', this.handleResize)\n//     }\n//     handleMouseMove(e) {\n//         // actual coordinates\n//         const coords = [\n//             e.clientX - this.canvasRef.current.offsetLeft,\n//             e.clientY - this.canvasRef.current.offsetTop\n//         ]\n//         if (this.state.drawing) {\n//             this.ctx.lineTo(...coords)\n//             this.ctx.stroke()\n//         }\n//         if (this.props.handleMouseMove) {\n//             this.props.handleMouseMove(...coords)\n//         }\n//     }\n//     handleResize() {\n//         this.setState({ width: window.innerWidth, height: window.innerHeight })\n//     }\n//     startDrawing(e) {\n//         this.ctx.lineJoin = 'round'\n//         this.ctx.lineCap = 'round'\n//         this.ctx.lineWidth = 10\n//         this.ctx.strokeStyle = this.props.color\n//         this.ctx.beginPath();\n//         // actual coordinates\n//         this.ctx.moveTo(\n//             e.clientX - this.canvasRef.current.offsetLeft,\n//             e.clientY - this.canvasRef.current.offsetTop\n//         )\n//         this.setState({ drawing: true })\n//     }\n//     stopDrawing() {\n//         this.ctx.closePath()\n//         this.setState({ drawing: false })\n//     }\n//     render() {\n//         return (\n//             <React.Fragment>\n//                 <canvas\n//                     ref={this.canvasRef}\n//                     width={this.props.width || this.state.width}\n//                     height={this.props.height || this.state.height}\n//                     onMouseDown={this.startDrawing}\n//                     onMouseUp={this.stopDrawing}\n//                     onMouseOut={this.stopDrawing}\n//                     onMouseMove={this.handleMouseMove}\n//                 />\n//             </React.Fragment>\n//         )\n//     }\n// }\n\nimport React, { useState, useEffect, useRef } from 'react'\nimport useWindowSize from './WindowSize'\n\nexport default function Canvas(props) {\n    const [drawing, setDrawing] = useState(false)\n    const [width, setWidth] = useState(window.innerWidth)\n    const [height, setHeight] = useState(window.innerHeight)\n\n    const canvasRef = useRef()\n    const ctx = useRef()\n\n    useEffect(() => {\n        ctx.current = canvasRef.current.getContext('2d')\n    }, [])\n\n    const [windowWidth, windowHeight] = useWindowSize(() => {\n        setWidth(window.innerWidth)\n        setHeight(window.innerHeight)\n    })\n\n    function handleMouseMove(e) {\n        // actual coordinates\n        const coords = [\n            e.clientX - canvasRef.current.offsetLeft,\n            e.clientY - canvasRef.current.offsetTop\n        ]\n        if (drawing) {\n            ctx.current.lineTo(...coords)\n            ctx.current.stroke()\n        }\n        if (props.handleMouseMove) {\n            props.handleMouseMove(...coords)\n        }\n    }\n    function startDrawing(e) {\n        ctx.current.lineJoin = 'round'\n        ctx.current.lineCap = 'round'\n        ctx.current.lineWidth = 10\n        ctx.current.strokeStyle = props.color\n        ctx.current.beginPath();\n        // actual coordinates\n        ctx.current.moveTo(\n            e.clientX - canvasRef.current.offsetLeft,\n            e.clientY - canvasRef.current.offsetTop\n        )\n        setDrawing(true)\n    }\n    function stopDrawing() {\n        ctx.current.closePath()\n        setDrawing(false)\n    }\n\n    return <canvas\n        ref={canvasRef}\n        width={props.width || width}\n        height={props.height || height}\n        onMouseDown={startDrawing}\n        onMouseUp={stopDrawing}\n        onMouseOut={stopDrawing}\n        onMouseMove={handleMouseMove}\n    />\n}\n","import React, { useState, useEffect } from 'react'\nimport randomColor from 'randomcolor'\n\nexport default function ColorPicker({ colors = [], activeColor, setActiveColor }) {\n    if (!colors.length) return null\n    return (\n        <fieldset className=\"color-picker\">\n            {colors.map((color, i) => (\n                <label key={i}>\n                    <input\n                        name=\"color\"\n                        type=\"radio\"\n                        value={color}\n                        checked={activeColor === color}\n                        onChange={() => setActiveColor(color)}\n                    />\n                    <span style={{ background: color }} />\n                </label>\n            ))}\n        </fieldset>\n    )\n}\n\n","import React from 'react'\n\nexport default React.memo(({ cb }) => {\n    return <button className=\"button-refresh-colors\" onClick={cb}>&#8634;</button>\n})","import React, { useState, useEffect, useCallback, useRef } from 'react'\nimport Name from './Name'\nimport Canvas from './Canvas'\nimport ColorPicker from './ColorPicker'\nimport RefreshButton from './RefreshBtn'\nimport useWindowSize from './WindowSize'\nimport randomColor from 'randomcolor'\n\nexport default function Paint() {\n    const [colors, setColors] = useState([])\n    const [activeColor, setActiveColor] = useState(null)\n    const getColors = useCallback(() => {\n        const baseColor = randomColor().slice(1);\n        fetch(`https://www.thecolorapi.com/scheme?hex=${baseColor}&mode=monochrome`)\n            .then(res => res.json())\n            .then(res => {\n                setColors(res.colors.map(color => color.hex.value))\n                setActiveColor(res.colors[0].hex.value)\n            })\n    }, [])\n    useEffect(getColors, [])\n\n    const [visible, setVisible] = useState(false)\n    let timeoutId = useRef()\n    const [windowWidth, windowHeight] = useWindowSize(() => {\n        setVisible(true)\n        clearTimeout(timeoutId.current)\n        timeoutId.current = setTimeout(() => setVisible(false), 500)\n    })\n\n    return (\n        <div className=\"app\">\n            <header style={{ borderTop: `10px solid ${activeColor}` }}>\n                <div>\n                    <Name />\n                </div>\n                <div style={{ marginTop: 10 }}>\n                    <ColorPicker\n                        colors={colors}\n                        activeColor={activeColor}\n                        setActiveColor={setActiveColor}\n                    />\n                    <RefreshButton cb={getColors} />\n                </div>\n            </header>\n            {activeColor && (\n                <Canvas\n                    color={activeColor}\n                    height={window.innerHeight}\n                />\n            )}\n            <div className={`window-size ${visible ? '' : 'hidden'}`}>\n                {windowWidth} x {windowHeight}\n            </div>\n        </div>\n    )\n}\n// import React, { useState, useEffect, useRef, useCallback } from 'react'\n// import Name from './Name'\n// import ColorPicker from './ColorPicker'\n// import randomColor from 'randomcolor'\n// import WindowsSizePopup from \"./WindowSize\"\n// import Canvas from './Canvas'\n// import RefreshButton from \"./RefreshBtn\"\n\n// export default function Paint() {\n//     const [colors, setColors] = useState([])\n//     const [activeColor, setActiveColor] = useState(null)\n\n//     const getColors = useCallback(() => {\n//         const baseColor = randomColor().slice(1);\n//         fetch(`https://www.thecolorapi.com/scheme?hex=${baseColor}&mode=monochrome`)\n//             .then(res => res.json())\n//             .then(res => {\n//                 setColors(res.colors.map(color => color.hex.value))\n//                 setActiveColor(res.colors[0].hex.value)\n//             })\n//     }, []\n//     )\n//     useEffect(getColors, [])\n//     const headerRef = useRef({ offsetHeight: 0 })\n\n//     return (\n//         <div className=\"app\">\n//             <header style={{ borderTop: `10px solid ${activeColor}` }}>\n//                 <div>\n//                     <Name />\n//                 </div>\n//                 <div style={{ marginTop: 10 }}>\n//                     <ColorPicker\n//                         colors={colors}\n//                         activeColor={activeColor}\n//                         setActiveColor={setActiveColor}\n//                     />\n//                 </div>\n//                 <RefreshButton cb={getColors} />\n//             </header>\n//             {activeColor && (\n//                 <Canvas\n//                     color={activeColor}\n//                     height={window.innerHeight - headerRef.current.offsetHeight}\n//                 />\n//             )}\n//             <WindowsSizePopup />\n//         </div>\n//     )\n// }\n\n","import React from 'react';\nimport './App.css';\nimport Playground from './Playground';\nimport TitleName from \"./components/Name\"\nimport Paint from \"./components/Paint\"\n\nfunction App() {\n  return (\n    <div >\n      <Playground />\n      <Paint />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}